box: 
# The image that is going to be used as base image for our application
  id: node:latest
    
build:
  steps:
# The code bellow is about getting our application nodejs dependencies installedd on our container.
# To see the references for other languages, please refer to: https://devcenter.wercker.com/quickstarts/languages/
    - npm-install
    - npm-test
    - script:
        name: echo nodejs information
        # Here we are declaring an environment variable to use it latter in our application
        code: |
          export DBURI=$DBURI
          echo $DBURI
          echo "node version $(node -v) running"
          echo "npm version $(npm -v) running"
push:
  steps:
    - internal/docker-push:
            entrypoint: node index.js
            working-dir: $WERCKER_ROOT
            tag: $WERCKER_GIT_COMMIT
            ports: "80"
            username: $DOCKER_USERNAME
            password: $OCI_AUTH_TOKEN
            repository: $DOCKER_REGISTRY/$DOCKER_REPO
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cloudnativeapp
  labels:
    commit: ${WERCKER_GIT_COMMIT}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudnativeapp
  template:
    metadata:
      labels:
        app: cloudnativeapp
        commit: ${WERCKER_GIT_COMMIT}
    spec:
      containers:
      - name: cloudnativeapp
        image: ${DOCKER_REGISTRY}/${DOCKER_REPO}:${WERCKER_GIT_COMMIT}
        ports:
        - name: cloudnativeapp
          containerPort: 80
          protocol: TCP
      imagePullSecrets:
        - name: wercker
---
apiVersion: v1
kind: Service
metadata:
  name: cloudnativeapp
  labels:
    app: cloudnativeapp
    commit: ${WERCKER_GIT_COMMIT}
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: cloudnativeapp
    commit: ${WERCKER_GIT_COMMIT}
  type: LoadBalancer
---
